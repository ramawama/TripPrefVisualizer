
"use client";
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Link from 'next/link';
import { ColumnDef, createColumnHelper } from "@tanstack/react-table";


const [isLoading, setLoading] = useState(true);
const [tripData, setTripData] = useState([]);
const [filteredTripData, setFilteredTripData] = useState([]);
const [tripLeaderData, setTripLeaderData] = useState([]);
const [filteredTripLeaderData, setFilteredTripLeaderData] = useState([]);
const [tripPreferenceData, setTripPreferenceData] = useState([]);
const [filteredTripPreferenceData, setFilteredTripPreferenceData] = useState([]);
const [sortCriteria, setSortCriteria] = useState('start_date');
const [sortOrder, setSortOrder] = useState('asc');

useEffect(() => {
    const fetchData = async () => {
      try {
        // fetch JSON data from your API endpoint
        const response = await axios.get('http://localhost:5000/get-data');
        const data = response.data; 

        // separate data into individual arrays
        const { trip, trip_leader, trip_preference } = data;
        setTripData(trip);
        setFilteredTripData(trip);
        setTripLeaderData(trip_leader);
        setFilteredTripLeaderData(trip_leader); 
        setTripPreferenceData(trip_preference);
        setFilteredTripPreferenceData(trip_preference);

        setLoading(false);
      } catch (error) {
        console.error('Error fetching data:', error);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

const columnHelper = createColumnHelper<Person>();

export const userColumnDefs: ColumnDef<Person, any>[] = [
  columnHelper.accessor((row) => row.first_name, {
    id: "first_name",
    cell: (info) => info.getValue(),
    footer: (info) => info.column.id,
  }),
  columnHelper.accessor((row) => row.last_name, {
    id: "last_name",
    cell: (info) => <span>{info.getValue()}</span>,
    header: () => <span>Last Name</span>,
  }),
  columnHelper.accessor((row) => row.gender, {
    id: "gender",
    cell: (info) => <span>{info.getValue()}</span>,
    header: () => <span>Gender</span>,
  }),
  columnHelper.accessor((row) => row.email, {
    id: "email",
    cell: (info) => <span>{info.getValue()}</span>,
    header: () => <span>Email</span>,
  }),
  columnHelper.accessor((row) => row.ip_address, {
    id: "ip_address",
    cell: (info) => <span>{info.getValue()}</span>,
    header: () => <span>IP Address</span>,
  }),
  columnHelper.accessor((row) => row.countryCode, {
    id: "countryCode",
    cell: (info) => <span>{info.getValue()}</span>,
    header: () => <span>Country Code</span>,
  }),
  columnHelper.accessor((row) => row.city, {
    id: "city",
    cell: (info) => <span>{info.getValue()}</span>,
    header: () => <span>City</span>,
  }),
];
